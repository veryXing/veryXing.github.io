[{"title":"QSS (Qt Style Sheet) 樣式設定","url":"/article/bf8fd827.html","content":"QSS 是 PyQt6 裡用來設定元件樣式的樣式表 ( Qt Style Sheet )，使用方法和網頁 CSS 非常類似，雖然 QSS 沒有辦法像網頁 CSS 般的完整，但已經可以滿足大部分的樣式設計需求，這篇教學會介紹如何使用 QSS 設定元件樣式。\n<!-- more -->\n\n## 開始使用 QSS\n\n在 PyQt6 裡建立元件之後，元件會具有一個 setStyleSheet() 方法，在方法裡撰寫樣式，就會修改原本元件的樣式，例如下方的程式碼執行後，就會將 QLabel 的文字設定為 30px 的大小和紅色 ( 如果遇到多個樣式，可以使用三個單引號的方式撰寫 )。\n\n```py\nfrom PyQt6 import QtWidgets\nimport sys\napp = QtWidgets.QApplication(sys.argv)\n\nForm = QtWidgets.QWidget()\nForm.setWindowTitle('oxxo.studio')\nForm.resize(300, 200)\n\nlabel = QtWidgets.QLabel(Form)\nlabel.setGeometry(10,10,150,100)\nlabel.setText('HELLO')\nlabel.setStyleSheet('''\n        font-size:30px;\n        color:red;\n    ''')\n\nForm.show()\nsys.exit(app.exec())\n```\n\nclass 寫法：\n\n```py\nfrom PyQt6 import QtWidgets\nimport sys\n\nclass MyWidget(QtWidgets.QWidget):\n    def __init__(self):\n        super().__init__()\n        self.setObjectName(\"MainWindow\")\n        self.setWindowTitle('oxxo.studio')\n        self.resize(300, 200)\n        self.ui()\n\n    def ui(self):\n        self.label = QtWidgets.QLabel(self)\n        self.label.setGeometry(10,10,150,100)\n        self.label.setText('HELLO')\n        self.label.setStyleSheet('''\n                font-size:30px;\n                color:red;\n            ''')\n\nif __name__ == '__main__':\n    app = QtWidgets.QApplication(sys.argv)\n    Form = MyWidget()\n    Form.show()\n    sys.exit(app.exec())\n```\n\n![PyQt6 教學 - QSS ( Qt Style Sheet ) 樣式設定](assets/qss-01-1728890756438-3.webp)\n\n## 常用樣式設定\n\n下方列出一些常用的樣式 ( 完整屬性參考「[List of Properties](https://doc.qt.io/qt-6/stylesheet-reference.html#list-of-properties)」)。\n\n| 樣式             | 說明                                                     |\n| ---------------- | -------------------------------------------------------- |\n| font-size        | 文字大小，單位 px。                                      |\n| color            | 文字顏色，可使用顏色名稱或色碼，例如 #f00 為紅色。       |\n| font-family      | 字體。                                                   |\n| font-weight      | 字體粗細，可設定 normal、bold。                          |\n| font-style       | 文字樣式，可設定 normal、italic、oblique。               |\n| spacing          | 文字間距，不用單位。                                     |\n| text-align       | 文字對齊方式，可設定 left、center、right。               |\n| height           | 元件高度，單位 px。                                      |\n| width            | 元件寬度，單位 px。                                      |\n| margin           | 元件外邊距，單位 px。                                    |\n| padding          | 元件內邊距，單位 px。                                    |\n| opacity          | 透明度，範圍 0～255，0 為透明。                          |\n| background       | 背景色或背景圖，可使用顏色名稱或色碼，例如 #f00 為紅色。 |\n| background-color | 背景色，可使用顏色名稱或色碼，例如 #f00 為紅色。         |\n| border           | 邊框，有三個值分別是 ( 粗細、樣式、顏色 )。              |\n| border-width     | 邊框寬度，單位 px。                                      |\n| border-style     | 邊框樣式，可設定 solid、dashed、dotted。                 |\n| border-color     | 邊框顏色，可使用顏色名稱或色碼，例如 #f00 為紅色。       |\n| border-radius    | 邊框是否圓角，圓角半徑單位 px。                          |\n\n樣式裡的 padding、margin、border-width、border-style、border-color 的簡單設定規則如下 ( 以 padding 為例 )：\n\n| 寫法                    | 說明                             |\n| ----------------------- | -------------------------------- |\n| padding:1px             | 上下左右都 1px。                 |\n| padding:1px 2px         | 上下 1px，左右 2px。             |\n| padding:1px 2px 3px     | 上 1px，左右 2px，下 3px。       |\n| padding:1px 2px 3px 4px | 上 1px，右 2px，下 3px，左 4px。 |\n\n如果不要一次設定 padding、margin、border、border-width、border-style、border-color，也可以加上方向的名稱單獨設定 ( 以 padding 為例 )：\n\n| 樣式           | 說明                      |\n| -------------- | ------------------------- |\n| padding-top    | 元件上方內邊距，單位 px。 |\n| padding-right  | 元件右側內邊距，單位 px。 |\n| padding-bottom | 元件下方內邊距，單位 px。 |\n| padding-left   | 元件左側內邊距，單位 px。 |\n\n## 偽狀態設定\n\n除了設定主要樣式，QSS 也像 CSS 一樣可以設定「偽狀態」( Pseudo-States )，偽類的意思是「觸發了某些事件或進行某些行為後，才會出現的狀態」 ( 偽類會使用一個冒號開頭 )，例如「滑鼠移到按鈕上」的行為，對應的偽狀態就是「:hover」，下方列出一些常見的偽狀態 ( 完整偽狀態參考「[List of Pseudo-States](https://doc.qt.io/qt-6/stylesheet-reference.html#list-of-pseudo-states)」 )：\n\n| 偽狀態    | 說明                          |\n| --------- | ----------------------------- |\n| :hover    | 滑鼠移上去。                  |\n| :active   | 發生行為 ( 通常可能是點擊 )。 |\n| :focus    | 成為焦點 ( 通常是點擊之後 )。 |\n| :checked  | 被勾選。                      |\n| :disabled | 停用狀態。                    |\n| :enabled  | 啟用狀態。                    |\n| :selected | 被選取。                      |\n\n以下方的程式碼為例，執行後會設定 QPushButton 的 :hover 樣式 ( 注意需要額外使用 QPushButton:hover )，當滑鼠移動到按鈕上方時，按鈕的邊框會變粗，背景色會變成黃色。\n\n```py\nfrom PyQt6 import QtWidgets\nimport sys\napp = QtWidgets.QApplication(sys.argv)\n\nForm = QtWidgets.QWidget()\nForm.setWindowTitle('oxxo.studio')\nForm.resize(300, 200)\n\nbtn = QtWidgets.QPushButton(Form)\nbtn.setGeometry(10,10,150,100)\nbtn.setText('HELLO')\nbtn.setStyleSheet('''\n    QPushButton{\n        border:1px solid #000;\n        background:#fff;\n    }\n    QPushButton:hover{\n        border:5px solid #000;\n        background:#ff0;\n    }\n''')\n\nForm.show()\nsys.exit(app.exec())\n```\n\nclass 寫法：\n\n```py\nfrom PyQt6 import QtWidgets\nimport sys\n\nclass MyWidget(QtWidgets.QWidget):\n    def __init__(self):\n        super().__init__()\n        self.setObjectName(\"MainWindow\")\n        self.setWindowTitle('oxxo.studio')\n        self.resize(300, 200)\n        self.ui()\n\n    def ui(self):\n        self.btn = QtWidgets.QPushButton(self)\n        self.btn.setGeometry(10,10,150,100)\n        self.btn.setText('HELLO')\n        self.btn.setStyleSheet('''\n            QPushButton{\n                border:1px solid #000;\n                background:#fff;\n            }\n            QPushButton:hover{\n                border:5px solid #000;\n                background:#ff0;\n            }\n        ''')\n\nif __name__ == '__main__':\n    app = QtWidgets.QApplication(sys.argv)\n    Form = MyWidget()\n    Form.show()\n    sys.exit(app.exec())\n```\n\n![PyQt6 教學 - QSS ( Qt Style Sheet ) 樣式設定 - 偽狀態設定](assets/qss-02.webp)\n\n## 子控制項設定\n\n在 PyQt6 裡，有些元件可能會包含其他的子控制項 ( 例如 QListWidget 列表選擇框會包含選項的子元件 )，這些子元件也可以使用對應的 QSS 語法設定樣式 ( 子控制項會使用兩個冒號開頭 )，下方列出一些常見的子元件設定方法 ( 完整子元件設定參考「[List of Sub-Controls](https://doc.qt.io/qt-6/stylesheet-reference.html#list-of-sub-controls)」 )：\n\n| 子控制項   | 說明             |\n| ---------- | ---------------- |\n| ::chunk    | 進度條進度。     |\n| ::item     | 列表選擇框項目。 |\n| ::groove   | 滑桿底線。       |\n| ::handle   | 滑桿拉霸。       |\n| ::sub-page | 滑桿調整線。     |\n\n下方的程式碼執行後，會將 QSlider 數值調整滑桿更改為黑底線與紅色調整桿。\n\n```py\nfrom PyQt6 import QtWidgets, QtCore\nimport sys\napp = QtWidgets.QApplication(sys.argv)\n\nForm = QtWidgets.QWidget()\nForm.setWindowTitle('oxxo.studio')\nForm.resize(300, 200)\n\nslider = QtWidgets.QSlider(Form)\nslider.setGeometry(20,20,200,30)\nslider.setOrientation(QtCore.Qt.Orientation.Horizontal)\nslider.setStyleSheet('''\n    QSlider {\n        border-radius: 10px;\n    }\n    QSlider::groove:horizontal {\n        height: 5px;\n        background: #000;\n    }\n    QSlider::handle:horizontal{\n        background: #f00;\n        width: 16px;\n        height: 16px;\n        margin:-6px 0;\n        border-radius:8px;\n    }\n    QSlider::sub-page:horizontal{\n        background:#f90;\n    }\n''')\n\nForm.show()\nsys.exit(app.exec())\n```\n\nclass 寫法：\n\n```py\nfrom PyQt6 import QtWidgets, QtCore\nimport sys\n\nclass MyWidget(QtWidgets.QWidget):\n    def __init__(self):\n        super().__init__()\n        self.setObjectName(\"MainWindow\")\n        self.setWindowTitle('oxxo.studio')\n        self.resize(300, 200)\n        self.ui()\n\n    def ui(self):\n        self.slider = QtWidgets.QSlider(self)\n        self.slider.setGeometry(20,20,200,30)\n        self.slider.setOrientation(QtCore.Qt.Orientation.Horizontal)\n        self.slider.setStyleSheet('''\n            QSlider {\n                border-radius: 10px;\n            }\n            QSlider::groove:horizontal {\n                height: 5px;\n                background: #000;\n            }\n            QSlider::handle:horizontal{\n                background: #f00;\n                width: 16px;\n                height: 16px;\n                margin:-6px 0;\n                border-radius:8px;\n            }\n            QSlider::sub-page:horizontal{\n                background:#f90;\n            }\n        ''')\n\nif __name__ == '__main__':\n    app = QtWidgets.QApplication(sys.argv)\n    Form = MyWidget()\n    Form.show()\n    sys.exit(app.exec())\n```\n\n![PyQt6 教學 - QSS ( Qt Style Sheet ) 樣式設定 - 子控制項設定](assets/qss-03.webp)\n\n## 注意事項\n\n雖然使用 QSS 可以很方便的修改樣式，但仍然有些小細節需要注意，例如 QPushButton，一旦設定了「邊框」，則必須要一併設定背景色和點擊樣式，不然其他樣式就會被清空，類似這種狀況可以參考「[Qt Style Sheets Reference](https://doc.qt.io/qt-6/stylesheet-reference.html)」裡有特別標注「粉紅色背景」的說明。\n\n下方的程式碼執行後，會發現本來按鈕的點擊效果，因為設定了 border 樣式而消失了。\n\n```py\nfrom PyQt6 import QtWidgets\nimport sys\napp = QtWidgets.QApplication(sys.argv)\n\nForm = QtWidgets.QWidget()\nForm.setWindowTitle('oxxo.studio')\nForm.resize(300, 200)\n\nbtn = QtWidgets.QPushButton(Form)\nbtn.setGeometry(10,10,150,100)\nbtn.setText('HELLO')\nbtn.setStyleSheet('border:1px solid #000')\n\nForm.show()\nsys.exit(app.exec())\n```\n\nclass 寫法：\n\n```py\nfrom PyQt6 import QtWidgets, QtCore\nimport sys\n\nclass MyWidget(QtWidgets.QWidget):\n    def __init__(self):\n        super().__init__()\n        self.setObjectName(\"MainWindow\")\n        self.setWindowTitle('oxxo.studio')\n        self.resize(300, 200)\n        self.ui()\n\n    def ui(self):\n        self.btn = QtWidgets.QPushButton(self)\n        self.btn.setGeometry(10,10,150,100)\n        self.btn.setText('HELLO')\n        self.btn.setStyleSheet('border:1px solid #000')\n\nif __name__ == '__main__':\n    app = QtWidgets.QApplication(sys.argv)\n    Form = MyWidget()\n    Form.show()\n    sys.exit(app.exec())\n```\n\n![PyQt6 教學 - QSS ( Qt Style Sheet ) 樣式設定 - 注意事項](assets/qss-04.webp)\n\n## 參考資料\n\n完整 QSS 說明可以參考：[Qt Style Sheets Reference](https://doc.qt.io/qt-6/stylesheet-reference.html)","tags":["PyQt","Qss"],"categories":["PyQt"]},{"title":"利用QML实现无边框窗体，要求可移动，可缩放","url":"/article/37bece30.html","content":"**一，需求**\n\n利用QML实现无边框窗体，要求可移动，可缩放。\n\n**二，效果**\n\n![img](assets/ai.gif)\n\n{% asset_img assets/ai.gif %}\n{% asset_img \"ai.gif\" \"spaced title\" %}\n\n**三，实现**\n\n```python\n//主窗体\nimport QtQuick 2.12\nimport QtQuick.Controls 2.3\nimport QtQuick.Window 2.3\n\nimport \"./widget\"\n\nWindow  {\n    id: window\n    visible: true\n    flags: Qt.FramelessWindowHint|Qt.Window\n    width: 1024\n    height: 768\n    color: \"#0F1013\"\n    property int bw: 3\n\n    //改变鼠标形状\n    MouseArea {\n        anchors.fill: parent\n        hoverEnabled: true\n        cursorShape: {\n            const p = Qt.point(mouseX, mouseY)\n            const b = bw + 10\n            if (p.x < b && p.y < b) return Qt.SizeFDiagCursor\n            if (p.x >= width - b && p.y >= height - b) return Qt.SizeFDiagCursor\n            if (p.x >= width - b && p.y < b) return Qt.SizeBDiagCursor\n            if (p.x < b && p.y >= height - b) return Qt.SizeBDiagCursor\n            if (p.x < b || p.x >= width - b) return Qt.SizeHorCursor\n            if (p.y < b || p.y >= height - b) return Qt.SizeVerCursor\n        }\n        acceptedButtons: Qt.NoButton\n    }\n\n    DragHandler {\n        id: resizeHandler\n        grabPermissions: TapHandler.TakeOverForbidden\n        target: null\n        onActiveChanged: if (active) {\n            const p = resizeHandler.centroid.position\n            const b = bw + 10\n            let e = 0;\n            if (p.x < b) { e |= Qt.LeftEdge }\n            if (p.x >= width - b) { e |= Qt.RightEdge }\n            if (p.y < b) { e |= Qt.TopEdge }\n            if (p.y >= height - b) { e |= Qt.BottomEdge }\n            window.startSystemResize(e);\n        }\n    }\n\n    MyToolBar{\n        window:window\n    }\n}\n//工具栏\nimport QtQuick 2.12\nimport QtQuick.Controls 2.3\nimport QtQuick.Window 2.3\n\nToolBar {\n    height: 50\n    anchors.top: parent.top\n    anchors.left: parent.left\n    anchors.right: parent.right\n    x:bw\n    y:bw\n\n    property var window: null\n    //关闭 最大化 最小化按钮\n    function toggleMaximized(mode) {\n        if(mode===0){\n            if (window.visibility === Window.Maximized) {\n                window.showNormal();\n            } else {\n                window.showMaximized();\n            }\n        }else if(mode===1){\n            window.showMinimized()\n        }else if(mode===2){\n            window.close()\n        }else if(mode===4){\n            return window.visibility\n        }\n\n    }\n\n    Rectangle{\n        id:rectBk\n        anchors.fill: parent\n        color: \"#1F2025\"\n        MouseArea {\n            anchors.fill: parent\n            acceptedButtons: Qt.LeftButton\n            property point clickPos: \"0,0\"\n            onPressed: {\n                clickPos = Qt.point(mouse.x, mouse.y)\n            }\n            onDoubleClicked: {\n                toggleMaximized(0)\n            }\n            onPositionChanged: {\n                //鼠标偏移量\n                var delta = Qt.point(mouse.x-clickPos.x, mouse.y-clickPos.y)\n\n                window.setX(window.x+delta.x)\n                window.setY(window.y+delta.y)\n            }\n        }\n    }\n\n    Row{\n        anchors.right: parent.right\n        anchors.top: parent.top\n        anchors.bottom: parent.bottom\n        spacing: 0\n        Rectangle{\n            width: 50\n            height: 50\n            color: Qt.rgba(0,0,0,0)\n            Image {\n                anchors.centerIn: parent\n                id: min\n                source: \"qrc:/image/icon/minus.png\"\n                width: 26\n                height: 26\n            }\n            MouseArea{\n                anchors.fill: parent\n                hoverEnabled: true\n                onClicked: {\n                    toggleMaximized(1)\n                }\n                onEntered: {\n                    parent.color = \"#454B57\"\n                }\n\n                onExited: {\n                    parent.color = Qt.rgba(0,0,0,0)\n                }\n            }\n        }\n\n        Rectangle{\n            width: 50\n            height: 50\n            color: Qt.rgba(0,0,0,0)\n            Image {\n                id: max\n                source: (toggleMaximized(4) === Window.Maximized)?\"qrc:/image/icon/maximize.png\":\"qrc:/image/icon/maximize2.png\"\n                anchors.centerIn: parent\n                width: 26\n                height: 26\n            }\n            MouseArea{\n                anchors.fill: parent\n                hoverEnabled: true\n                onClicked: {\n                    console.log(\"max\")\n                    toggleMaximized(0)\n                }\n                onEntered: {\n                    parent.color = \"#454B57\"\n                }\n                onExited: {\n                    parent.color = Qt.rgba(0,0,0,0)\n                }\n            }\n        }\n\n        Rectangle{\n            width: 50\n            height: 50\n            color: Qt.rgba(0,0,0,0)\n            Image {\n                id: close\n                source: \"qrc:/image/icon/close.png\"\n                anchors.centerIn: parent\n                width: 26\n                height: 26\n            }\n            MouseArea{\n                anchors.fill: parent\n                hoverEnabled: true\n                onClicked: {\n                    toggleMaximized(2)\n                }\n                onEntered: {\n                    parent.color = \"#454B57\"\n                }\n\n                onExited: {\n                    parent.color = Qt.rgba(0,0,0,0)\n                }\n            }\n        }\n\n    }\n\n    //标题\n    Text {\n        id:title\n        anchors.left: parent.left\n        anchors.verticalCenter:  parent.verticalCenter\n        anchors.leftMargin: 20\n        color: \"#FFFFFF\"\n        font.pixelSize: 24\n        text: qsTr(\"影像检测仪\")\n    }\n\n    Menu {\n        id:settingMenu\n        x:setting.x\n        y:setting.y+setting.height+1\n        width: 120\n        Action {\n            text: qsTr(\"创建项目\")\n            onTriggered: console.log(\"创建项目\")\n\n        }\n        Action {\n            text: qsTr(\"编辑项目\")\n            onTriggered: console.log(\"编辑项目\")\n        }\n\n        delegate: MenuBarItem {\n            id: settingMenuItem\n            height: 40\n            width: 120\n\n            contentItem: Text {\n                text: settingMenuItem.text\n                font.pixelSize: 16\n                color:  \"#ffffff\"\n                horizontalAlignment: Text.AlignHCenter\n                verticalAlignment: Text.AlignVCenter\n                elide: Text.ElideRight\n            }\n\n            background: Rectangle {\n                implicitWidth: 120\n                implicitHeight: 40\n                color: Qt.rgba(0,0,0,0)\n                MouseArea{\n                    anchors.fill: parent\n                    hoverEnabled: true\n                    propagateComposedEvents: true\n                    onClicked: {\n                        settingMenu.close()\n                        settingMenuItem.action.trigger()\n                    }\n                    onEntered: {\n                        parent.color = \"#454B57\"\n                    }\n\n                    onExited: {\n                        parent.color = Qt.rgba(0,0,0,0)\n                    }\n                }\n            }\n        }\n        background: Rectangle {\n            implicitWidth: 150\n            implicitHeight: 40\n            color: \"#1F2025\"\n        }\n    }\n\n    //设置\n    Rectangle{\n        id:setting\n        anchors.top: parent.top\n        anchors.bottom: parent.bottom\n        anchors.left:title.right\n        anchors.leftMargin: 100\n        color: Qt.rgba(0,0,0,0)\n        width: 100\n\n        Row{\n            anchors.centerIn: parent\n            spacing: 2\n            Text {\n                color: \"#FFFFFF\"\n                font.pixelSize: 20\n                text: qsTr(\"设置\")\n                verticalAlignment: Text.AlignVCenter\n                anchors.verticalCenter: parent.verticalCenter\n            }\n            Image {\n                width: 32\n                height: 32\n                anchors.verticalCenter: parent.verticalCenter\n                source: \"qrc:/image/icon/down.png\"\n            }\n        }\n        MouseArea{\n            anchors.fill: parent\n            hoverEnabled: true\n            propagateComposedEvents: true\n            onClicked: {\n                settingMenu.open()\n            }\n            onEntered: {\n                parent.color = \"#454B57\"\n            }\n\n            onExited: {\n                parent.color = Qt.rgba(0,0,0,0)\n            }\n        }\n\n    }\n\n    //关于菜单\n    Menu {\n        id:aboutMenu\n        x:about.x\n        y:about.y+about.height+1\n        width: 120\n        Action {\n            text: qsTr(\"关于这个\")\n            onTriggered: console.log(\"关于这个\")\n        }\n        Action {\n            text: qsTr(\"关于那个\")\n            onTriggered: console.log(\"关于那个\")\n        }\n\n        delegate: MenuBarItem {\n            id: aboutMenuItem\n            height: 40\n            width: 120\n\n            contentItem: Text {\n                text: aboutMenuItem.text\n                font.pixelSize: 16\n                color:  \"#ffffff\"\n                horizontalAlignment: Text.AlignHCenter\n                verticalAlignment: Text.AlignVCenter\n                elide: Text.ElideRight\n            }\n\n            background: Rectangle {\n                implicitWidth: 120\n                implicitHeight: 40\n                color: Qt.rgba(0,0,0,0)\n                MouseArea{\n                    anchors.fill: parent\n                    hoverEnabled: true\n                    propagateComposedEvents: true\n                    onClicked: {\n                        aboutMenu.close()\n                        aboutMenuItem.action.trigger()\n                    }\n                    onEntered: {\n                        parent.color = \"#454B57\"\n                    }\n\n                    onExited: {\n                        parent.color = Qt.rgba(0,0,0,0)\n                    }\n                }\n\n            }\n\n        }\n        background: Rectangle {\n            implicitWidth: 150\n            implicitHeight: 40\n            color: \"#1F2025\"\n        }\n    }\n    //关于\n    Rectangle{\n        id:about\n        anchors.top: parent.top\n        anchors.bottom: parent.bottom\n        anchors.left:setting.right\n        color: Qt.rgba(0,0,0,0)\n        width: 100\n\n        Row{\n            anchors.centerIn: parent\n            spacing: 2\n            Text {\n                color: \"#FFFFFF\"\n                font.pixelSize: 20\n                text: qsTr(\"关于\")\n                verticalAlignment: Text.AlignVCenter\n                anchors.verticalCenter: parent.verticalCenter\n            }\n            Image {\n                width: 32\n                height: 32\n                anchors.verticalCenter: parent.verticalCenter\n                source: \"qrc:/image/icon/down.png\"\n            }\n        }\n        MouseArea{\n            anchors.fill: parent\n            hoverEnabled: true\n            propagateComposedEvents: true\n            onClicked: {\n                aboutMenu.open()\n            }\n            onEntered: {\n                parent.color = \"#454B57\"\n            }\n\n            onExited: {\n                parent.color = Qt.rgba(0,0,0,0)\n            }\n        }\n\n    }\n}\n```"},{"url":"/article/0.html","content":"## pyqt5 无边框界面\n\n```python\nfrom PyQt5.QtWidgets import QWidget, QLabel, QPushButton, QVBoxLayout\nfrom PyQt5.QtCore import Qt, QPoint\nfrom PyQt5.QtGui import QFont, QCursor\n\n\nclass QTitleLabel(QLabel):\n    \"\"\"\n    新建标题栏标签类\n    \"\"\"\n\n    def __init__(self, *args):\n        super(QTitleLabel, self).__init__(*args)\n        self.setAlignment(Qt.AlignLeft | Qt.AlignVCenter)\n        self.setFixedHeight(30)\n\n\nclass QTitleButton(QPushButton):\n    \"\"\"\n    新建标题栏按钮类\n    \"\"\"\n\n    def __init__(self, *args):\n        super(QTitleButton, self).__init__(*args)\n        self.setFont(QFont(\"Webdings\"))  # 特殊字体以不借助图片实现最小化最大化和关闭按钮\n        self.setFixedWidth(40)\n\n\nclass QUnFrameWindow(QWidget):\n    \"\"\"\n    无边框窗口类\n    \"\"\"\n\n    def __init__(self):\n        super(QUnFrameWindow, self).__init__(None, Qt.FramelessWindowHint)  # 设置为顶级窗口，无边框\n        self._padding = 5  # 设置边界宽度为5\n        self.initTitleLabel()  # 安放标题栏标签\n        self.setWindowTitle = self._setTitleText(self.setWindowTitle)  # 用装饰器将设置WindowTitle名字函数共享到标题栏标签上\n        self.setWindowTitle(\"UnFrameWindow\")\n        self.initLayout()  # 设置框架布局\n        self.setMinimumWidth(250)\n        self.setMouseTracking(True)  # 设置widget鼠标跟踪\n        self.initDrag()  # 设置鼠标跟踪判断默认值\n\n    def initDrag(self):\n        # 设置鼠标跟踪判断扳机默认值\n        self._move_drag = False\n        self._corner_drag = False\n        self._bottom_drag = False\n        self._right_drag = False\n\n    def initTitleLabel(self):\n        # 安放标题栏标签\n        self._TitleLabel = QTitleLabel(self)\n        self._TitleLabel.setMouseTracking(True)  # 设置标题栏标签鼠标跟踪（如不设，则标题栏内在widget上层，无法实现跟踪）\n        self._TitleLabel.setIndent(10)  # 设置标题栏文本缩进\n        self._TitleLabel.move(0, 0)  # 标题栏安放到左上角\n\n    def initLayout(self):\n        # 设置框架布局\n        self._MainLayout = QVBoxLayout()\n        self._MainLayout.setSpacing(0)\n        self._MainLayout.addWidget(QLabel(), Qt.AlignLeft)  # 顶一个QLabel在竖放框架第一行，以免正常内容挤占到标题范围里\n        self._MainLayout.addStretch()\n        self.setLayout(self._MainLayout)\n\n    def addLayout(self, QLayout):\n        # 给widget定义一个addLayout函数，以实现往竖放框架的正确内容区内嵌套Layout框架\n        self._MainLayout.addLayout(QLayout)\n\n    def _setTitleText(self, func):\n        # 设置标题栏标签的装饰器函数\n        def wrapper(*args):\n            self._TitleLabel.setText(*args)\n            return func(*args)\n\n        return wrapper\n\n    def setTitleAlignment(self, alignment):\n        # 给widget定义一个setTitleAlignment函数，以实现标题栏标签的对齐方式设定\n        self._TitleLabel.setAlignment(alignment | Qt.AlignVCenter)\n\n    def setCloseButton(self, bool):\n        # 给widget定义一个setCloseButton函数，为True时设置一个关闭按钮\n        if bool == True:\n            self._CloseButton = QTitleButton(b'\\xef\\x81\\xb2'.decode(\"utf-8\"), self)\n            self._CloseButton.setObjectName(\"CloseButton\")  # 设置按钮的ObjectName以在qss样式表内定义不同的按钮样式\n            self._CloseButton.setToolTip(\"关闭窗口\")\n            self._CloseButton.setMouseTracking(True)  # 设置按钮鼠标跟踪（如不设，则按钮在widget上层，无法实现跟踪）\n            self._CloseButton.setFixedHeight(self._TitleLabel.height())  # 设置按钮高度为标题栏高度\n            self._CloseButton.clicked.connect(self.close)  # 按钮信号连接到关闭窗口的槽函数\n\n    def setMinMaxButtons(self, bool):\n        # 给widget定义一个setMinMaxButtons函数，为True时设置一组最小化最大化按钮\n        if bool == True:\n            self._MinimumButton = QTitleButton(b'\\xef\\x80\\xb0'.decode(\"utf-8\"), self)\n            self._MinimumButton.setObjectName(\"MinMaxButton\")  # 设置按钮的ObjectName以在qss样式表内定义不同的按钮样式\n            self._MinimumButton.setToolTip(\"最小化\")\n            self._MinimumButton.setMouseTracking(True)  # 设置按钮鼠标跟踪（如不设，则按钮在widget上层，无法实现跟踪）\n            self._MinimumButton.setFixedHeight(self._TitleLabel.height())  # 设置按钮高度为标题栏高度\n            self._MinimumButton.clicked.connect(self.showMinimized)  # 按钮信号连接到最小化窗口的槽函数\n            self._MaximumButton = QTitleButton(b'\\xef\\x80\\xb1'.decode(\"utf-8\"), self)\n            self._MaximumButton.setObjectName(\"MinMaxButton\")  # 设置按钮的ObjectName以在qss样式表内定义不同的按钮样式\n            self._MaximumButton.setToolTip(\"最大化\")\n            self._MaximumButton.setMouseTracking(True)  # 设置按钮鼠标跟踪（如不设，则按钮在widget上层，无法实现跟踪）\n            self._MaximumButton.setFixedHeight(self._TitleLabel.height())  # 设置按钮高度为标题栏高度\n            self._MaximumButton.clicked.connect(self._changeNormalButton)  # 按钮信号连接切换到恢复窗口大小按钮函数\n\n    def _changeNormalButton(self):\n        # 切换到恢复窗口大小按钮\n        try:\n            self.showMaximized()  # 先实现窗口最大化\n            self._MaximumButton.setText(b'\\xef\\x80\\xb2'.decode(\"utf-8\"))  # 更改按钮文本\n            self._MaximumButton.setToolTip(\"恢复\")  # 更改按钮提示\n            self._MaximumButton.disconnect()  # 断开原本的信号槽连接\n            self._MaximumButton.clicked.connect(self._changeMaxButton)  # 重新连接信号和槽\n        except:\n            pass\n\n    def _changeMaxButton(self):\n        # 切换到最大化按钮\n        try:\n            self.showNormal()\n            self._MaximumButton.setText(b'\\xef\\x80\\xb1'.decode(\"utf-8\"))\n            self._MaximumButton.setToolTip(\"最大化\")\n            self._MaximumButton.disconnect()\n            self._MaximumButton.clicked.connect(self._changeNormalButton)\n        except:\n            pass\n\n    def resizeEvent(self, QResizeEvent):\n        # 自定义窗口调整大小事件\n        self._TitleLabel.setFixedWidth(self.width())  # 将标题标签始终设为窗口宽度\n        # 分别移动三个按钮到正确的位置\n        try:\n            self._CloseButton.move(self.width() - self._CloseButton.width(), 0)\n        except:\n            pass\n        try:\n            self._MinimumButton.move(self.width() - (self._CloseButton.width() + 1) * 3 + 1, 0)\n        except:\n            pass\n        try:\n            self._MaximumButton.move(self.width() - (self._CloseButton.width() + 1) * 2 + 1, 0)\n        except:\n            pass\n        # 重新调整边界范围以备实现鼠标拖放缩放窗口大小，采用三个列表生成式生成三个列表\n        self._right_rect = [QPoint(x, y) for x in range(self.width() - self._padding, self.width() + 1)\n                            for y in range(1, self.height() - self._padding)]\n        self._bottom_rect = [QPoint(x, y) for x in range(1, self.width() - self._padding)\n                             for y in range(self.height() - self._padding, self.height() + 1)]\n        self._corner_rect = [QPoint(x, y) for x in range(self.width() - self._padding, self.width() + 1)\n                             for y in range(self.height() - self._padding, self.height() + 1)]\n\n    def mousePressEvent(self, event):\n        # 重写鼠标点击的事件\n        if (event.button() == Qt.LeftButton) and (event.pos() in self._corner_rect):\n            # 鼠标左键点击右下角边界区域\n            self._corner_drag = True\n            event.accept()\n        elif (event.button() == Qt.LeftButton) and (event.pos() in self._right_rect):\n            # 鼠标左键点击右侧边界区域\n            self._right_drag = True\n            event.accept()\n        elif (event.button() == Qt.LeftButton) and (event.pos() in self._bottom_rect):\n            # 鼠标左键点击下侧边界区域\n            self._bottom_drag = True\n            event.accept()\n        elif (event.button() == Qt.LeftButton) and (event.y() < self._TitleLabel.height()):\n            # 鼠标左键点击标题栏区域\n            self._move_drag = True\n            self.move_DragPosition = event.globalPos() - self.pos()\n            event.accept()\n\n    def mouseMoveEvent(self, QMouseEvent):\n        # 判断鼠标位置切换鼠标手势\n        if QMouseEvent.pos() in self._corner_rect:\n            self.setCursor(Qt.SizeFDiagCursor)\n        elif QMouseEvent.pos() in self._bottom_rect:\n            self.setCursor(Qt.SizeVerCursor)\n        elif QMouseEvent.pos() in self._right_rect:\n            self.setCursor(Qt.SizeHorCursor)\n        else:\n            self.setCursor(Qt.ArrowCursor)\n        # 当鼠标左键点击不放及满足点击区域的要求后，分别实现不同的窗口调整\n        # 没有定义左方和上方相关的5个方向，主要是因为实现起来不难，但是效果很差，拖放的时候窗口闪烁，再研究研究是否有更好的实现\n        if Qt.LeftButton and self._right_drag:\n            # 右侧调整窗口宽度\n            self.resize(QMouseEvent.pos().x(), self.height())\n            QMouseEvent.accept()\n        elif Qt.LeftButton and self._bottom_drag:\n            # 下侧调整窗口高度\n            self.resize(self.width(), QMouseEvent.pos().y())\n            QMouseEvent.accept()\n        elif Qt.LeftButton and self._corner_drag:\n            # 右下角同时调整高度和宽度\n            self.resize(QMouseEvent.pos().x(), QMouseEvent.pos().y())\n            QMouseEvent.accept()\n        elif Qt.LeftButton and self._move_drag:\n            # 标题栏拖放窗口位置\n            self.move(QMouseEvent.globalPos() - self.move_DragPosition)\n            QMouseEvent.accept()\n\n    def mouseReleaseEvent(self, QMouseEvent):\n        # 鼠标释放后，各扳机复位\n        self._move_drag = False\n        self._corner_drag = False\n        self._bottom_drag = False\n        self._right_drag = False\n\n\nif __name__ == \"__main__\":\n    from PyQt5.QtWidgets import QApplication\n    import sys\n\n    app = QApplication(sys.argv)\n    # app.setStyleSheet(open(\"./UnFrameStyle.qss\").read())\n    window = QUnFrameWindow()\n    window.setCloseButton(True)\n    window.setMinMaxButtons(True)\n    window.show()\n    sys.exit(app.exec_())\n```\n\n## 第二\n\n```python\nfrom PyQt6.QtCore import Qt, QPointF, QPoint\nfrom PyQt6.QtWidgets import QApplication, QMainWindow, QWidget\n \nclass MainWindow(QMainWindow):\n    def __init__(self):\n        super().__init__()\n\n        # 设置窗口无边框\n        self.setWindowFlags(Qt.WindowType.FramelessWindowHint)\n\n        # 创建一个子窗口\n        self.widget = QWidget(self)\n        self.widget.setGeometry(0, 0, 200, 200)\n\n        # 设置子窗口背景颜色\n        self.widget.setStyleSheet(\"background-color: red;\")\n\n        # 记录鼠标按下时的坐标\n        self.mouse_pos = None\n\n    def mousePressEvent(self, event):\n        # 鼠标按下时记录坐标\n        self.mouse_pos = event.globalPosition()\n\n    def mouseMoveEvent(self, event):\n        # 鼠标移动时计算移动距离\n        if self.mouse_pos:\n            diff = event.globalPosition() - self.mouse_pos\n            self.move(self.pos() + diff.toPoint())\n            self.mouse_pos = event.globalPosition()\n\n    def mouseReleaseEvent(self, event):\n        # 鼠标释放时清空坐标\n        self.mouse_pos = None\n\nif __name__ == '__main__':\n    app = QApplication([])\n    window = MainWindow()\n    window.show()\n    app.exec()\n```\n\n## 第三\n\n```python\nimport sys\nfrom PySide6.QtWidgets import *\nfrom PySide6.QtGui import *\nfrom PySide6.QtCore import *\nfrom ui import ui_main_win\n \n# 主窗口\nclass main_win(QWidget):\n\n    def __init__(self,parent = None):\n\n        # 从文件中加载UI定义\n        super(main_win, self).__init__(parent)\n        self.ui = ui_main_win.Ui_Form()\n        self.ui.setupUi(self)\n\n        self.setWindowFlag(Qt.FramelessWindowHint)\t\t#将界面设置为无框\n        self.setAttribute(Qt.WA_TranslucentBackground)\t#将界面属性设置为半透明\n        self.shadow = QGraphicsDropShadowEffect()\t\t#设定一个阴影,半径为 4,颜色为 2, 10, 25,偏移为 0,0\n        self.shadow.setBlurRadius(4)\n        self.shadow.setColor(QColor(2, 10, 25))\n        self.shadow.setOffset(0, 0)\n        self.ui.frame.setGraphicsEffect(self.shadow)\t#为frame设定阴影效果\n\n\n#   --------------------------------------------------移动功能-------------------------------------------------\n \n    def mousePressEvent(self, event):\t\t#鼠标左键按下时获取鼠标坐标\n        if event.button() == Qt.LeftButton:\n            self._move_drag = True\n            self.cursor_win_pos = event.globalPosition() - self.pos()\n            event.accept()\n\n    def mouseMoveEvent(self, event):\t#鼠标在按下左键的情况下移动时,根据坐标移动界面\n        # 移动事件\n        if Qt.LeftButton and self._move_drag:\n            m_Point = event.globalPosition() - self.cursor_win_pos\n            self.move(m_Point.x() ,m_Point.y())\n            event.accept()\n\n    def mouseReleaseEvent(self, event):\t#鼠标按键释放时,取消移动\n        self._move_drag = False\n\n# 每一个 PySide6 应用都必须创建一个应用对象\napp = QApplication([])\nmain_win = main_win()\nmain_win.show()\nsys.exit(app.exec())\n```\n\n## 第四\n\n```python\nimport sys\nfrom PySide6 import QtGui\n\nfrom uis.frame_ui import *\nimport icons_rc\n\n\nclass MainWindow(QMainWindow):\n    def __init__(self):\n        super().__init__()\n        self.ui = Ui_MainWindow()\n        self.ui.setupUi(self)\n        # 使模拟边框的3个按钮生效(关闭、最小化、最大化、双击标题框)\n        self.redefine_window_border_btn()\n        # 设置无边框\n        self.setWindowFlag(Qt.Window | Qt.FramelessWindowHint | Qt.WindowSystemMenuHint\n                           | Qt.WindowMinimizeButtonHint| Qt.WindowMaximizeButtonHint)\n        self.centralWidget().layout().setContentsMargins(0, 0, 0, 0)\n        self.ui.window_title.setText(\"模板窗口V1.0\")\n\n    def resize_maximize(self):\n        \"\"\"\n        最大化窗口\n        :return:\n        \"\"\"\n        if self.isMaximized():\n            self.showNormal()\n        else:\n            self.showMaximized()\n\n    def double_clicked_border_bar(self, event):\n        \"\"\"\n        双击顶部标题条,使其在最大化和还原之间切换\n        :param event:\n        :return:\n        \"\"\"\n        if event.button() == QtGui.Qt.MouseButton.LeftButton:\n            self.resize_maximize()\n\n    def move_title_bar(self, event):\n        \"\"\"\n        拖动顶部标题条\n        :param event:\n        :return:\n        \"\"\"\n        self.windowHandle().startSystemMove()\n\n    def redefine_window_border_btn(self):\n        \"\"\"\n        使模拟边框的3个按钮生效(关闭、最小化、最大化、双击标题框)\n        :return:\n        \"\"\"\n        self.ui.btn_close.clicked.connect(self.close)  # 关闭按钮\n        self.ui.btn_min.clicked.connect(self.showMinimized)  # 最小化按钮\n        self.ui.btn_max.clicked.connect(self.resize_maximize)  # 最大化按钮\n        # 设置可拖动（通过拖动窗口上的横条来达到拖动窗口的效果）\n        self.ui.border_frame_mid.mouseDoubleClickEvent = self.double_clicked_border_bar\n        self.ui.border_frame_right.mouseDoubleClickEvent = self.double_clicked_border_bar\n        self.ui.border_frame_mid.mouseMoveEvent = self.move_title_bar\n        self.ui.border_frame_right.mouseMoveEvent = self.move_title_bar\n\nif __name__ == '__main__':\n    app = QApplication(sys.argv)\n    window = MainWindow()\n    window.show()\n    sys.exit(app.exec())\n```\n\n\n\n"},{"title":"PyQt5窗口跟随其它窗口","url":"/article/2241662d.html","content":"\n要实现`PyQt`窗口跟随其它外部的窗口，能想到两点办法，一个是hook系统事件得到目标窗口的位置和大小以及是否关闭等，二是通过循环检测窗口的位置来实现。\n<!-- more -->\n\n## 基于Windows定时检测目标窗口\n\n1. 利用`win32gui`模块获取目标窗口的句柄\n2. 通过句柄获取目标窗口的大小位置，并设置自己的位置\n3. 主要是检测时间，在10毫秒以下很流畅\n4. 窗口关闭是根据目标句柄无效来判断\n\nhttps://github.com/PyQt5/PyQt/blob/master/Demo/FollowWindow.py\n\n## 代码\n\n```python\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\nCreated on 2018年10月22日\n@author: Irony\n@site: https://github.com/892768447\n@email: 892768447@qq.com\n@file: FollowWindow\n@description: \n\"\"\"\nimport os\n\nfrom PyQt5.QtCore import QTimer\nfrom PyQt5.QtWidgets import QWidget, QVBoxLayout, QPushButton\nimport win32gui\n\n\n__Author__ = \"\"\"By: Irony\nQQ: 892768447\nEmail: 892768447@qq.com\"\"\"\n__Copyright__ = \"Copyright (c) 2018 Irony\"\n__Version__ = \"Version 1.0\"\n\n\nclass Window(QWidget):\n\n    def __init__(self, *args, **kwargs):\n        super(Window, self).__init__(*args, **kwargs)\n        layout = QVBoxLayout(self)\n        layout.addWidget(QPushButton('test', self))\n        self.tmpHwnd = None\n        # 启动定时器检测记事本的位置大小和是否关闭\n        self.checkTimer = QTimer(self, timeout=self.checkWindow)\n        self.checkTimer.start(10)  # 10毫秒比较流畅\n\n    def checkWindow(self):\n        # 查找\n        hwnd = win32gui.FindWindow('Notepad', None)\n        if self.tmpHwnd and not hwnd:\n            # 表示记事本关闭了\n            self.checkTimer.stop()\n            self.close()  # 关闭自己\n            return\n        if not hwnd:\n            return\n        self.tmpHwnd = hwnd\n        # 获取位置\n        rect = win32gui.GetWindowRect(hwnd)\n        print(rect)\n        self.move(rect[2], rect[1])\n\n\nif __name__ == '__main__':\n    import sys\n    from PyQt5.QtWidgets import QApplication\n    # 先检测是否已有记事本打开\n    hwnd = win32gui.FindWindow('Notepad', None)\n    print('hwnd', hwnd)\n    if not hwnd:\n        # 启动记事本\n        os.startfile('notepad')\n    app = QApplication(sys.argv)\n    w = Window()\n    w.show()\n    sys.exit(app.exec_())\n```\n\n## 效果图\n\n![FollowWindow](/PyQt/Demo/ScreenShot/FollowWindow.gif)","tags":["PyQt","窗口"],"categories":["例子"]},{"url":"/about/132.html","content":"{% gallery %}\n![](https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg)\n![](https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg)\n![](https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg)\n![](https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg)\n![](https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg)\n![](https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg)\n![](https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg)\n![](https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg)\n{% endgallery %}"},{"title":"categories","url":"/categories/index.html"},{"title":"about","url":"/about/index.html"},{"title":"gallery","url":"/gallery/1index.html","content":"{% gallery %}\n![](https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg)\n![](https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg)\n![](https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg)\n![](https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg)\n![](https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg)\n![](https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg)\n![](https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg)\n![](https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg)\n{% endgallery %}"},{"title":"link","url":"/link/index.html"},{"title":"gallery","url":"/gallery/index.html","content":"<div class=\"gallery-group-main\">\n{% galleryGroup '壁紙' '收藏的一些壁紙' '/Gallery/wallpaper' https://i.loli.net/2019/11/10/T7Mu8Aod3egmC4Q.png %}\n{% galleryGroup '漫威' '關於漫威的圖片' '/Gallery/marvel' https://i.loli.net/2019/12/25/8t97aVlp4hgyBGu.jpg %}\n{% galleryGroup 'OH MY GIRL' '關於OH MY GIRL的圖片' '/Gallery/ohmygirl' https://i.loli.net/2019/12/25/hOqbQ3BIwa6KWpo.jpg %}\n</div>"},{"title":"shuoshuo","url":"/shuoshuo/index.html"},{"title":"標籤","url":"/tags/index.html"}]